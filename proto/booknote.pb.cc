// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "booknote.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace booknote {

namespace {

const ::google::protobuf::Descriptor* Head_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Head_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRegiste_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRegiste_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqUserLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqUserLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResUserLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResUserLogin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_booknote_2eproto() {
  protobuf_AddDesc_booknote_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "booknote.proto");
  GOOGLE_CHECK(file != NULL);
  Head_descriptor_ = file->message_type(0);
  static const int Head_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, ecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, seq_),
  };
  Head_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Head_descriptor_,
      Head::default_instance_,
      Head_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Head));
  ReqRegiste_descriptor_ = file->message_type(1);
  static const int ReqRegiste_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegiste, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegiste, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegiste, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegiste, verify_code_),
  };
  ReqRegiste_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRegiste_descriptor_,
      ReqRegiste::default_instance_,
      ReqRegiste_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegiste, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegiste, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRegiste));
  ReqUserLogin_descriptor_ = file->message_type(2);
  static const int ReqUserLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserLogin, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserLogin, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserLogin, passwd_),
  };
  ReqUserLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqUserLogin_descriptor_,
      ReqUserLogin::default_instance_,
      ReqUserLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqUserLogin));
  ResUserLogin_descriptor_ = file->message_type(3);
  static const int ResUserLogin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUserLogin, head_),
  };
  ResUserLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResUserLogin_descriptor_,
      ResUserLogin::default_instance_,
      ResUserLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUserLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResUserLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResUserLogin));
  ErrorCode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_booknote_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Head_descriptor_, &Head::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRegiste_descriptor_, &ReqRegiste::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqUserLogin_descriptor_, &ReqUserLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResUserLogin_descriptor_, &ResUserLogin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_booknote_2eproto() {
  delete Head::default_instance_;
  delete Head_reflection_;
  delete ReqRegiste::default_instance_;
  delete ReqRegiste_reflection_;
  delete ReqUserLogin::default_instance_;
  delete ReqUserLogin_reflection_;
  delete ResUserLogin::default_instance_;
  delete ResUserLogin_reflection_;
}

void protobuf_AddDesc_booknote_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016booknote.proto\022\010booknote\"/\n\004Head\022\013\n\003cm"
    "d\030\001 \001(\r\022\r\n\005ecode\030\002 \001(\r\022\013\n\003seq\030\003 \001(\r\"]\n\nR"
    "eqRegiste\022\034\n\004head\030\001 \002(\0132\016.booknote.Head\022"
    "\014\n\004user\030\002 \002(\t\022\016\n\006passwd\030\003 \002(\t\022\023\n\013verify_"
    "code\030\004 \002(\t\"J\n\014ReqUserLogin\022\034\n\004head\030\001 \002(\013"
    "2\016.booknote.Head\022\014\n\004user\030\002 \001(\t\022\016\n\006passwd"
    "\030\003 \001(\t\",\n\014ResUserLogin\022\034\n\004head\030\001 \002(\0132\016.b"
    "ooknote.Head*,\n\tErrorCode\022\022\n\005ERROR\020\377\377\377\377\377"
    "\377\377\377\377\001\022\013\n\007SUCCESS\020\000", 338);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "booknote.proto", &protobuf_RegisterTypes);
  Head::default_instance_ = new Head();
  ReqRegiste::default_instance_ = new ReqRegiste();
  ReqUserLogin::default_instance_ = new ReqUserLogin();
  ResUserLogin::default_instance_ = new ResUserLogin();
  Head::default_instance_->InitAsDefaultInstance();
  ReqRegiste::default_instance_->InitAsDefaultInstance();
  ReqUserLogin::default_instance_->InitAsDefaultInstance();
  ResUserLogin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_booknote_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_booknote_2eproto {
  StaticDescriptorInitializer_booknote_2eproto() {
    protobuf_AddDesc_booknote_2eproto();
  }
} static_descriptor_initializer_booknote_2eproto_;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorCode_descriptor_;
}
bool ErrorCode_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Head::kCmdFieldNumber;
const int Head::kEcodeFieldNumber;
const int Head::kSeqFieldNumber;
#endif  // !_MSC_VER

Head::Head()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Head::InitAsDefaultInstance() {
}

Head::Head(const Head& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Head::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  ecode_ = 0u;
  seq_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Head::~Head() {
  SharedDtor();
}

void Head::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Head::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Head::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Head_descriptor_;
}

const Head& Head::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_booknote_2eproto();  return *default_instance_;
}

Head* Head::default_instance_ = NULL;

Head* Head::New() const {
  return new Head;
}

void Head::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0u;
    ecode_ = 0u;
    seq_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Head::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ecode;
        break;
      }
      
      // optional uint32 ecode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ecode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ecode_)));
          set_has_ecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seq;
        break;
      }
      
      // optional uint32 seq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Head::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }
  
  // optional uint32 ecode = 2;
  if (has_ecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ecode(), output);
  }
  
  // optional uint32 seq = 3;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seq(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Head::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }
  
  // optional uint32 ecode = 2;
  if (has_ecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ecode(), target);
  }
  
  // optional uint32 seq = 3;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seq(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Head::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }
    
    // optional uint32 ecode = 2;
    if (has_ecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ecode());
    }
    
    // optional uint32 seq = 3;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Head::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Head* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Head*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Head::MergeFrom(const Head& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_ecode()) {
      set_ecode(from.ecode());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Head::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Head::CopyFrom(const Head& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Head::IsInitialized() const {
  
  return true;
}

void Head::Swap(Head* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(ecode_, other->ecode_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Head::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Head_descriptor_;
  metadata.reflection = Head_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqRegiste::kHeadFieldNumber;
const int ReqRegiste::kUserFieldNumber;
const int ReqRegiste::kPasswdFieldNumber;
const int ReqRegiste::kVerifyCodeFieldNumber;
#endif  // !_MSC_VER

ReqRegiste::ReqRegiste()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqRegiste::InitAsDefaultInstance() {
  head_ = const_cast< ::booknote::Head*>(&::booknote::Head::default_instance());
}

ReqRegiste::ReqRegiste(const ReqRegiste& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqRegiste::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verify_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRegiste::~ReqRegiste() {
  SharedDtor();
}

void ReqRegiste::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (verify_code_ != &::google::protobuf::internal::kEmptyString) {
    delete verify_code_;
  }
  if (this != default_instance_) {
    delete head_;
  }
}

void ReqRegiste::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRegiste::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRegiste_descriptor_;
}

const ReqRegiste& ReqRegiste::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_booknote_2eproto();  return *default_instance_;
}

ReqRegiste* ReqRegiste::default_instance_ = NULL;

ReqRegiste* ReqRegiste::New() const {
  return new ReqRegiste;
}

void ReqRegiste::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::booknote::Head::Clear();
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
    if (has_verify_code()) {
      if (verify_code_ != &::google::protobuf::internal::kEmptyString) {
        verify_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRegiste::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .booknote.Head head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }
      
      // required string user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_passwd;
        break;
      }
      
      // required string passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_verify_code;
        break;
      }
      
      // required string verify_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verify_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verify_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->verify_code().data(), this->verify_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqRegiste::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .booknote.Head head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }
  
  // required string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user(), output);
  }
  
  // required string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->passwd(), output);
  }
  
  // required string verify_code = 4;
  if (has_verify_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verify_code().data(), this->verify_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->verify_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqRegiste::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .booknote.Head head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }
  
  // required string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user(), target);
  }
  
  // required string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->passwd(), target);
  }
  
  // required string verify_code = 4;
  if (has_verify_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verify_code().data(), this->verify_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->verify_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqRegiste::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .booknote.Head head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }
    
    // required string user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string passwd = 3;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
    // required string verify_code = 4;
    if (has_verify_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verify_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRegiste::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRegiste* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRegiste*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRegiste::MergeFrom(const ReqRegiste& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::booknote::Head::MergeFrom(from.head());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
    if (from.has_verify_code()) {
      set_verify_code(from.verify_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRegiste::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRegiste::CopyFrom(const ReqRegiste& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRegiste::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ReqRegiste::Swap(ReqRegiste* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(verify_code_, other->verify_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRegiste::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRegiste_descriptor_;
  metadata.reflection = ReqRegiste_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqUserLogin::kHeadFieldNumber;
const int ReqUserLogin::kUserFieldNumber;
const int ReqUserLogin::kPasswdFieldNumber;
#endif  // !_MSC_VER

ReqUserLogin::ReqUserLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqUserLogin::InitAsDefaultInstance() {
  head_ = const_cast< ::booknote::Head*>(&::booknote::Head::default_instance());
}

ReqUserLogin::ReqUserLogin(const ReqUserLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqUserLogin::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqUserLogin::~ReqUserLogin() {
  SharedDtor();
}

void ReqUserLogin::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
    delete head_;
  }
}

void ReqUserLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqUserLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqUserLogin_descriptor_;
}

const ReqUserLogin& ReqUserLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_booknote_2eproto();  return *default_instance_;
}

ReqUserLogin* ReqUserLogin::default_instance_ = NULL;

ReqUserLogin* ReqUserLogin::New() const {
  return new ReqUserLogin;
}

void ReqUserLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::booknote::Head::Clear();
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqUserLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .booknote.Head head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }
      
      // optional string user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_passwd;
        break;
      }
      
      // optional string passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqUserLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .booknote.Head head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }
  
  // optional string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user(), output);
  }
  
  // optional string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->passwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqUserLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .booknote.Head head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }
  
  // optional string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user(), target);
  }
  
  // optional string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->passwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqUserLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .booknote.Head head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }
    
    // optional string user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // optional string passwd = 3;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqUserLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqUserLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqUserLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqUserLogin::MergeFrom(const ReqUserLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::booknote::Head::MergeFrom(from.head());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqUserLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUserLogin::CopyFrom(const ReqUserLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUserLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReqUserLogin::Swap(ReqUserLogin* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqUserLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqUserLogin_descriptor_;
  metadata.reflection = ReqUserLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResUserLogin::kHeadFieldNumber;
#endif  // !_MSC_VER

ResUserLogin::ResUserLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResUserLogin::InitAsDefaultInstance() {
  head_ = const_cast< ::booknote::Head*>(&::booknote::Head::default_instance());
}

ResUserLogin::ResUserLogin(const ResUserLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResUserLogin::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResUserLogin::~ResUserLogin() {
  SharedDtor();
}

void ResUserLogin::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void ResUserLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResUserLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResUserLogin_descriptor_;
}

const ResUserLogin& ResUserLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_booknote_2eproto();  return *default_instance_;
}

ResUserLogin* ResUserLogin::default_instance_ = NULL;

ResUserLogin* ResUserLogin::New() const {
  return new ResUserLogin;
}

void ResUserLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::booknote::Head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResUserLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .booknote.Head head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResUserLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .booknote.Head head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResUserLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .booknote.Head head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResUserLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .booknote.Head head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResUserLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResUserLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResUserLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResUserLogin::MergeFrom(const ResUserLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::booknote::Head::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResUserLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResUserLogin::CopyFrom(const ResUserLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResUserLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResUserLogin::Swap(ResUserLogin* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResUserLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResUserLogin_descriptor_;
  metadata.reflection = ResUserLogin_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace booknote

// @@protoc_insertion_point(global_scope)
