// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: booknote.proto

#ifndef PROTOBUF_booknote_2eproto__INCLUDED
#define PROTOBUF_booknote_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace booknote {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_booknote_2eproto();
void protobuf_AssignDesc_booknote_2eproto();
void protobuf_ShutdownFile_booknote_2eproto();

class Head;
class ReqRegiste;
class ReqUserLogin;
class ResUserLogin;

enum ErrorCode {
  ERROR = -1,
  SUCCESS = 0
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = ERROR;
const ErrorCode ErrorCode_MAX = SUCCESS;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class Head : public ::google::protobuf::Message {
 public:
  Head();
  virtual ~Head();
  
  Head(const Head& from);
  
  inline Head& operator=(const Head& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Head& default_instance();
  
  void Swap(Head* other);
  
  // implements Message ----------------------------------------------
  
  Head* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Head& from);
  void MergeFrom(const Head& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);
  
  // optional uint32 ecode = 2;
  inline bool has_ecode() const;
  inline void clear_ecode();
  static const int kEcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 ecode() const;
  inline void set_ecode(::google::protobuf::uint32 value);
  
  // optional uint32 seq = 3;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 3;
  inline ::google::protobuf::uint32 seq() const;
  inline void set_seq(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:booknote.Head)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_ecode();
  inline void clear_has_ecode();
  inline void set_has_seq();
  inline void clear_has_seq();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 ecode_;
  ::google::protobuf::uint32 seq_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_booknote_2eproto();
  friend void protobuf_AssignDesc_booknote_2eproto();
  friend void protobuf_ShutdownFile_booknote_2eproto();
  
  void InitAsDefaultInstance();
  static Head* default_instance_;
};
// -------------------------------------------------------------------

class ReqRegiste : public ::google::protobuf::Message {
 public:
  ReqRegiste();
  virtual ~ReqRegiste();
  
  ReqRegiste(const ReqRegiste& from);
  
  inline ReqRegiste& operator=(const ReqRegiste& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRegiste& default_instance();
  
  void Swap(ReqRegiste* other);
  
  // implements Message ----------------------------------------------
  
  ReqRegiste* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqRegiste& from);
  void MergeFrom(const ReqRegiste& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .booknote.Head head = 1;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1;
  inline const ::booknote::Head& head() const;
  inline ::booknote::Head* mutable_head();
  inline ::booknote::Head* release_head();
  
  // required string user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  
  // required string passwd = 3;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 3;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  
  // required string verify_code = 4;
  inline bool has_verify_code() const;
  inline void clear_verify_code();
  static const int kVerifyCodeFieldNumber = 4;
  inline const ::std::string& verify_code() const;
  inline void set_verify_code(const ::std::string& value);
  inline void set_verify_code(const char* value);
  inline void set_verify_code(const char* value, size_t size);
  inline ::std::string* mutable_verify_code();
  inline ::std::string* release_verify_code();
  
  // @@protoc_insertion_point(class_scope:booknote.ReqRegiste)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_passwd();
  inline void clear_has_passwd();
  inline void set_has_verify_code();
  inline void clear_has_verify_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::booknote::Head* head_;
  ::std::string* user_;
  ::std::string* passwd_;
  ::std::string* verify_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_booknote_2eproto();
  friend void protobuf_AssignDesc_booknote_2eproto();
  friend void protobuf_ShutdownFile_booknote_2eproto();
  
  void InitAsDefaultInstance();
  static ReqRegiste* default_instance_;
};
// -------------------------------------------------------------------

class ReqUserLogin : public ::google::protobuf::Message {
 public:
  ReqUserLogin();
  virtual ~ReqUserLogin();
  
  ReqUserLogin(const ReqUserLogin& from);
  
  inline ReqUserLogin& operator=(const ReqUserLogin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqUserLogin& default_instance();
  
  void Swap(ReqUserLogin* other);
  
  // implements Message ----------------------------------------------
  
  ReqUserLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqUserLogin& from);
  void MergeFrom(const ReqUserLogin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .booknote.Head head = 1;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1;
  inline const ::booknote::Head& head() const;
  inline ::booknote::Head* mutable_head();
  inline ::booknote::Head* release_head();
  
  // optional string user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  
  // optional string passwd = 3;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 3;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  
  // @@protoc_insertion_point(class_scope:booknote.ReqUserLogin)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_passwd();
  inline void clear_has_passwd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::booknote::Head* head_;
  ::std::string* user_;
  ::std::string* passwd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_booknote_2eproto();
  friend void protobuf_AssignDesc_booknote_2eproto();
  friend void protobuf_ShutdownFile_booknote_2eproto();
  
  void InitAsDefaultInstance();
  static ReqUserLogin* default_instance_;
};
// -------------------------------------------------------------------

class ResUserLogin : public ::google::protobuf::Message {
 public:
  ResUserLogin();
  virtual ~ResUserLogin();
  
  ResUserLogin(const ResUserLogin& from);
  
  inline ResUserLogin& operator=(const ResUserLogin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResUserLogin& default_instance();
  
  void Swap(ResUserLogin* other);
  
  // implements Message ----------------------------------------------
  
  ResUserLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResUserLogin& from);
  void MergeFrom(const ResUserLogin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .booknote.Head head = 1;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1;
  inline const ::booknote::Head& head() const;
  inline ::booknote::Head* mutable_head();
  inline ::booknote::Head* release_head();
  
  // @@protoc_insertion_point(class_scope:booknote.ResUserLogin)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::booknote::Head* head_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_booknote_2eproto();
  friend void protobuf_AssignDesc_booknote_2eproto();
  friend void protobuf_ShutdownFile_booknote_2eproto();
  
  void InitAsDefaultInstance();
  static ResUserLogin* default_instance_;
};
// ===================================================================


// ===================================================================

// Head

// optional uint32 cmd = 1;
inline bool Head::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Head::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Head::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Head::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 Head::cmd() const {
  return cmd_;
}
inline void Head::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 ecode = 2;
inline bool Head::has_ecode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Head::set_has_ecode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Head::clear_has_ecode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Head::clear_ecode() {
  ecode_ = 0u;
  clear_has_ecode();
}
inline ::google::protobuf::uint32 Head::ecode() const {
  return ecode_;
}
inline void Head::set_ecode(::google::protobuf::uint32 value) {
  set_has_ecode();
  ecode_ = value;
}

// optional uint32 seq = 3;
inline bool Head::has_seq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Head::set_has_seq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Head::clear_has_seq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Head::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 Head::seq() const {
  return seq_;
}
inline void Head::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
}

// -------------------------------------------------------------------

// ReqRegiste

// required .booknote.Head head = 1;
inline bool ReqRegiste::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqRegiste::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqRegiste::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqRegiste::clear_head() {
  if (head_ != NULL) head_->::booknote::Head::Clear();
  clear_has_head();
}
inline const ::booknote::Head& ReqRegiste::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::booknote::Head* ReqRegiste::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::booknote::Head;
  return head_;
}
inline ::booknote::Head* ReqRegiste::release_head() {
  clear_has_head();
  ::booknote::Head* temp = head_;
  head_ = NULL;
  return temp;
}

// required string user = 2;
inline bool ReqRegiste::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqRegiste::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqRegiste::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqRegiste::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& ReqRegiste::user() const {
  return *user_;
}
inline void ReqRegiste::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void ReqRegiste::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void ReqRegiste::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqRegiste::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* ReqRegiste::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string passwd = 3;
inline bool ReqRegiste::has_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqRegiste::set_has_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqRegiste::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqRegiste::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& ReqRegiste::passwd() const {
  return *passwd_;
}
inline void ReqRegiste::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void ReqRegiste::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void ReqRegiste::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqRegiste::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  return passwd_;
}
inline ::std::string* ReqRegiste::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string verify_code = 4;
inline bool ReqRegiste::has_verify_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqRegiste::set_has_verify_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqRegiste::clear_has_verify_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqRegiste::clear_verify_code() {
  if (verify_code_ != &::google::protobuf::internal::kEmptyString) {
    verify_code_->clear();
  }
  clear_has_verify_code();
}
inline const ::std::string& ReqRegiste::verify_code() const {
  return *verify_code_;
}
inline void ReqRegiste::set_verify_code(const ::std::string& value) {
  set_has_verify_code();
  if (verify_code_ == &::google::protobuf::internal::kEmptyString) {
    verify_code_ = new ::std::string;
  }
  verify_code_->assign(value);
}
inline void ReqRegiste::set_verify_code(const char* value) {
  set_has_verify_code();
  if (verify_code_ == &::google::protobuf::internal::kEmptyString) {
    verify_code_ = new ::std::string;
  }
  verify_code_->assign(value);
}
inline void ReqRegiste::set_verify_code(const char* value, size_t size) {
  set_has_verify_code();
  if (verify_code_ == &::google::protobuf::internal::kEmptyString) {
    verify_code_ = new ::std::string;
  }
  verify_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqRegiste::mutable_verify_code() {
  set_has_verify_code();
  if (verify_code_ == &::google::protobuf::internal::kEmptyString) {
    verify_code_ = new ::std::string;
  }
  return verify_code_;
}
inline ::std::string* ReqRegiste::release_verify_code() {
  clear_has_verify_code();
  if (verify_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = verify_code_;
    verify_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ReqUserLogin

// required .booknote.Head head = 1;
inline bool ReqUserLogin::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqUserLogin::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqUserLogin::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqUserLogin::clear_head() {
  if (head_ != NULL) head_->::booknote::Head::Clear();
  clear_has_head();
}
inline const ::booknote::Head& ReqUserLogin::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::booknote::Head* ReqUserLogin::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::booknote::Head;
  return head_;
}
inline ::booknote::Head* ReqUserLogin::release_head() {
  clear_has_head();
  ::booknote::Head* temp = head_;
  head_ = NULL;
  return temp;
}

// optional string user = 2;
inline bool ReqUserLogin::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqUserLogin::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqUserLogin::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqUserLogin::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& ReqUserLogin::user() const {
  return *user_;
}
inline void ReqUserLogin::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void ReqUserLogin::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void ReqUserLogin::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqUserLogin::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* ReqUserLogin::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string passwd = 3;
inline bool ReqUserLogin::has_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqUserLogin::set_has_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqUserLogin::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqUserLogin::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& ReqUserLogin::passwd() const {
  return *passwd_;
}
inline void ReqUserLogin::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void ReqUserLogin::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void ReqUserLogin::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqUserLogin::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  return passwd_;
}
inline ::std::string* ReqUserLogin::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ResUserLogin

// required .booknote.Head head = 1;
inline bool ResUserLogin::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResUserLogin::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResUserLogin::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResUserLogin::clear_head() {
  if (head_ != NULL) head_->::booknote::Head::Clear();
  clear_has_head();
}
inline const ::booknote::Head& ResUserLogin::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::booknote::Head* ResUserLogin::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::booknote::Head;
  return head_;
}
inline ::booknote::Head* ResUserLogin::release_head() {
  clear_has_head();
  ::booknote::Head* temp = head_;
  head_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace booknote

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< booknote::ErrorCode>() {
  return booknote::ErrorCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_booknote_2eproto__INCLUDED
